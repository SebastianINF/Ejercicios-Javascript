/*
1er Ejercicio: 
Sistema de registro de estudiantes
Diseña una clase llamada "Estudiante" que tenga las siguientes propiedades y métodos:
Propiedades:
  Nombre: el nombre del estudiante.
  Edad: la edad del estudiante.
  Carrera: la carrera en la que está inscrito el estudiante.
  Métodos:
ObtenerInformacion(): un método que devuelve un string con la información del estudiante en el siguiente formato: "Nombre: [nombre], Edad: [edad], Carrera: [carrera]."
CambiarCarrera(nuevaCarrera): un método que recibe como parámetro el nombre de una nueva carrera y actualiza la propiedad "Carrera" con el valor proporcionado.

Crea una instancia de la clase "Estudiante" con el nombre "Juan", edad 20 y carrera "Ingeniería de Software". Luego, muestra por consola la información del estudiante utilizando el método "ObtenerInformacion()". A continuación, cambia la carrera del estudiante a "Ingeniería Industrial" utilizando el método "CambiarCarrera()" y muestra nuevamente la información actualizada del estudiante.
*/

/*********************************************************************************************************************************/
/*
2do Ejercicio:
Crea una clase llamada Rectangulo que tenga dos propiedades: 
ancho y alto. La clase debe tener un método llamado calcularArea que calcule y devuelva el área del rectángulo.

Desafío:
Crea una instancia de la clase Rectangulo y utiliza el método calcularArea para calcular el área del rectángulo. Luego, imprime el resultado en la consola.
/*
/*********************************************************************************************************************************/
/*
3er Ejercicio:
Crea una clase llamada CuentaBancaria que tenga las propiedades saldo y propietario. La clase debe tener los siguientes métodos:

depositar: recibe una cantidad de dinero como parámetro y lo agrega al saldo de la cuenta.
retirar: recibe una cantidad de dinero como parámetro y la resta del saldo de la cuenta.
obtenerSaldo: devuelve el saldo actual de la cuenta.
Desafío:
Crea una instancia de la clase CuentaBancaria con un saldo inicial y un propietario. Luego, realiza una serie de depósitos y retiros utilizando los métodos de la clase. Finalmente, utiliza el método obtenerSaldo para obtener el saldo final de la cuenta y muéstralo en la consola.
*/

/*********************************************************************************************************************************/

/*
4to Ejercicio:
Crea una clase llamada Libreria que represente una librería virtual. La clase debe tener las siguientes propiedades y métodos:

Propiedades:
  libros: un array que almacenará objetos que representen libros. Cada objeto debe tener las propiedades titulo, autor y cantidad.
  Métodos:
  agregarLibro(titulo, autor, cantidad): recibe el título, autor y cantidad de un libro y agrega un objeto que lo represente al array libros.
  buscarLibro(titulo): recibe el título de un libro y devuelve un mensaje indicando si el libro está disponible en la librería y, en caso de estarlo, cuántas copias hay.
  venderLibro(titulo): recibe el título de un libro y disminuye la cantidad de copias disponibles en 1. Si no hay copias disponibles, muestra un mensaje indicando que el libro está agotado.
Desafío:
Crea una instancia de la clase Libreria y utiliza los métodos agregarLibro, buscarLibro y venderLibro para realizar las siguientes acciones:
Agrega al menos 3 libros diferentes a la librería.
Busca un libro específico y muestra el mensaje de disponibilidad.
Vende una copia del libro encontrado anteriormente y muestra el mensaje correspondiente.
Intenta vender otra copia del mismo libro y verifica el mensaje cuando el libro está agotado.
*/


/*********************************************************************************************************************************/

/*
5to Ejercicio:
Crea una clase llamada "Shape" (Figura) que tenga las siguientes propiedades y métodos:

Propiedades:

name (nombre): una cadena que representa el nombre de la figura.
numSides (número de lados): un número entero que representa la cantidad de lados de la figura.
sideLengths (longitudes de los lados): un array que contiene las longitudes de cada lado de la figura.
Métodos:

perimeter() (perímetro): devuelve el perímetro de la figura, que se calcula sumando todas las longitudes de los lados.
area() (área): este método debe ser implementado por cada subclase específica de figura y debe calcular y devolver el área de la figura.
Luego, crea al menos dos subclases de "Shape" llamadas "Triangle" (Triángulo) y "Rectangle" (Rectángulo) que extiendan la clase "Shape".

La subclase "Triangle" debe tener las siguientes propiedades y métodos adicionales:
Propiedades:

base (base): un número entero que representa la longitud de la base del triángulo.
height (altura): un número entero que representa la altura del triángulo.
Métodos:

area(): sobrescribe el método area() de la clase base para calcular y devolver el área del triángulo utilizando la fórmula (base * altura) / 2.
La subclase "Rectangle" debe tener las siguientes propiedades y métodos adicionales:
Propiedades:

width (ancho): un número entero que representa el ancho del rectángulo.
height (altura): un número entero que representa la altura del rectángulo.
Métodos:

area(): sobrescribe el método area() de la clase base para calcular y devolver el área del rectángulo utilizando la fórmula base * altura.
Tu tarea es implementar las clases "Shape", "Triangle" y "Rectangle" con sus propiedades y métodos correspondientes. Luego, crea instancias de estas clases y prueba los métodos para obtener el perímetro y el área de las figuras.

Recuerda, no proporcionaré la solución hasta que me la pidas. ¡Buena suerte!
*/